float4 ambient;

float4 cameraPosition;

sampler diffuseTexture: register(s0);
sampler specularTexture: register(s1);
sampler normalTexture: register(s2);

struct VsInput
{
	float4 position : POSITION;
	float3 normal : NORMAL;
	float2 uv0 : TEXCOORD0;
};

struct VsOutput
{
	float2 uv0 : TEXCOORD0;
	float4 position : POSITION;
};


VsOutput ilumination_vs(const VsInput vsIn){
	VsOutput result;
	
	result.uv0 = vsIn.uv0;
	result.position = vsIn.position;
	
	return result;
}

float4 ilumination_ps(const VsOutput psIn) : COLOR {

	float4 imageColor = 0;
	
	// emisive
	float4 emissiveColor = 0;
	
	// Diffuse
	float4 diffuseColor = tex2D(diffuseTexture, psIn.uv0) /2;
	
	// Ambient
	float4 ambientColor = diffuseColor * ambient /2;
	
	//specular
	float4 specularColor = tex2D(specularTexture, psIn.uv0);
	
	//normal
	float4 normalColor = tex2D(normalTexture, psIn.uv0);

	
	//calculo general
	//imageColor = emissiveColor + ambientColor + diffuseColor + specularColor;
	imageColor = ambientColor + diffuseColor;
	return imageColor;
}

